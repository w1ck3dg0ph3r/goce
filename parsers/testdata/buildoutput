# tmp
./main.go:11:6: cannot inline fibonacci: function too complex: cost 132 exceeds budget 80
./main.go:18:6: can inline square with cost 4 as: func(int) int { return n * n }
./main.go:22:6: can inline sqrt with cost 10 as: func(float32) float32 { return float32(math.Sqrt(float64(x))) }
./main.go:26:6: cannot inline main: function too complex: cost 571 exceeds budget 80
./main.go:23:26: inlining call to math.Sqrt
./main.go:27:18: inlining call to decimal.New
./main.go:28:22: inlining call to decimal.Decimal.String
./main.go:28:13: inlining call to fmt.Println
./main.go:30:13: inlining call to fmt.Println
./main.go:31:18: inlining call to sqrt
./main.go:31:13: inlining call to fmt.Println
./main.go:32:20: inlining call to square
./main.go:32:13: inlining call to fmt.Println
./main.go:27:18: inlining call to big.NewInt
./main.go:31:18: inlining call to math.Sqrt
./main.go:36:13: make([]int, 100) escapes to heap:
./main.go:36:13:   flow: {heap} = &{storage for make([]int, 100)}:
./main.go:36:13:     from make([]int, 100) (spill) at tmp/main.go:36:13
./main.go:36:13:     from s = make([]int, 100) (assign) at tmp/main.go:36:5
./main.go:36:13: make([]int, 100) escapes to heap
./main.go:32:20: ~r0 escapes to heap:
./main.go:32:20:   flow: {storage for ... argument} = &{storage for ~r0}:
./main.go:32:20:     from ~r0 (spill) at tmp/main.go:32:20
./main.go:32:20:     from ... argument (slice-literal-element) at tmp/main.go:32:13
./main.go:32:20:   flow: fmt.a = &{storage for ... argument}:
./main.go:32:20:     from ... argument (spill) at tmp/main.go:32:13
./main.go:32:20:     from fmt.a := ... argument (assign-pair) at tmp/main.go:32:13
./main.go:32:20:   flow: {heap} = *fmt.a:
./main.go:32:20:     from fmt.Fprintln(os.Stdout, fmt.a...) (call parameter) at tmp/main.go:32:13
./main.go:31:18: ~r0 escapes to heap:
./main.go:31:18:   flow: {storage for ... argument} = &{storage for ~r0}:
./main.go:31:18:     from ~r0 (spill) at tmp/main.go:31:18
./main.go:31:18:     from ... argument (slice-literal-element) at tmp/main.go:31:13
./main.go:31:18:   flow: fmt.a = &{storage for ... argument}:
./main.go:31:18:     from ... argument (spill) at tmp/main.go:31:13
./main.go:31:18:     from fmt.a := ... argument (assign-pair) at tmp/main.go:31:13
./main.go:31:18:   flow: {heap} = *fmt.a:
./main.go:31:18:     from fmt.Fprintln(os.Stdout, fmt.a...) (call parameter) at tmp/main.go:31:13
./main.go:30:14: res escapes to heap:
./main.go:30:14:   flow: {storage for ... argument} = &{storage for res}:
./main.go:30:14:     from res (spill) at tmp/main.go:30:14
./main.go:30:14:     from ... argument (slice-literal-element) at tmp/main.go:30:13
./main.go:30:14:   flow: fmt.a = &{storage for ... argument}:
./main.go:30:14:     from ... argument (spill) at tmp/main.go:30:13
./main.go:30:14:     from fmt.a := ... argument (assign-pair) at tmp/main.go:30:13
./main.go:30:14:   flow: {heap} = *fmt.a:
./main.go:30:14:     from fmt.Fprintln(os.Stdout, fmt.a...) (call parameter) at tmp/main.go:30:13
./main.go:28:22: ~r0 escapes to heap:
./main.go:28:22:   flow: {storage for ... argument} = &{storage for ~r0}:
./main.go:28:22:     from ~r0 (spill) at tmp/main.go:28:22
./main.go:28:22:     from ... argument (slice-literal-element) at tmp/main.go:28:13
./main.go:28:22:   flow: fmt.a = &{storage for ... argument}:
./main.go:28:22:     from ... argument (spill) at tmp/main.go:28:13
./main.go:28:22:     from fmt.a := ... argument (assign-pair) at tmp/main.go:28:13
./main.go:28:22:   flow: {heap} = *fmt.a:
./main.go:28:22:     from fmt.Fprintln(os.Stdout, fmt.a...) (call parameter) at tmp/main.go:28:13
./main.go:27:18: []big.Word{...} does not escape
./main.go:27:18: &big.Int{...} does not escape
./main.go:28:13: ... argument does not escape
./main.go:28:22: ~r0 escapes to heap
./main.go:30:13: ... argument does not escape
./main.go:30:14: res escapes to heap
./main.go:31:13: ... argument does not escape
./main.go:31:18: ~r0 escapes to heap
./main.go:32:13: ... argument does not escape
./main.go:32:20: ~r0 escapes to heap
main.init STEXT size=107 args=0x0 locals=0x20 funcid=0x0 align=0x0
	0x0000 00000 (<autogenerated>:1)	TEXT	main.init(SB), PKGINIT|ABIInternal, $32-0
	0x0000 00000 (<autogenerated>:1)	CMPQ	SP, 16(R14)
	0x0004 00004 (<autogenerated>:1)	PCDATA	$0, $-2
	0x0004 00004 (<autogenerated>:1)	JLS	100
	0x0006 00006 (<autogenerated>:1)	PCDATA	$0, $-1
	0x0006 00006 (<autogenerated>:1)	PUSHQ	BP
	0x0007 00007 (<autogenerated>:1)	MOVQ	SP, BP
	0x000a 00010 (<autogenerated>:1)	SUBQ	$24, SP
	0x000e 00014 (<autogenerated>:1)	FUNCDATA	$0, gclocals·FzY36IO2mY0y4dZ1+Izd/w==(SB)
	0x000e 00014 (<autogenerated>:1)	FUNCDATA	$1, gclocals·FzY36IO2mY0y4dZ1+Izd/w==(SB)
	0x000e 00014 (./main.go:36)	LEAQ	type:int(SB), AX
	0x0015 00021 (./main.go:36)	MOVL	$100, BX
	0x001a 00026 (./main.go:36)	MOVQ	BX, CX
	0x001d 00029 (./main.go:36)	PCDATA	$1, $0
	0x001d 00029 (./main.go:36)	NOP
	0x0020 00032 (./main.go:36)	CALL	runtime.makeslice(SB)
	0x0025 00037 (./main.go:36)	MOVQ	$100, main.s+8(SB)
	0x0030 00048 (./main.go:36)	MOVQ	$100, main.s+16(SB)
	0x003b 00059 (./main.go:36)	CMPL	runtime.writeBarrier(SB), $0
	0x0042 00066 (./main.go:36)	PCDATA	$0, $-2
	0x0042 00066 (./main.go:36)	JEQ	87
	0x0044 00068 (./main.go:36)	CALL	runtime.gcWriteBarrier2(SB)
	0x0049 00073 (./main.go:36)	MOVQ	AX, (R11)
	0x004c 00076 (./main.go:36)	MOVQ	main.s(SB), CX
	0x0053 00083 (./main.go:36)	MOVQ	CX, 8(R11)
	0x0057 00087 (./main.go:36)	MOVQ	AX, main.s(SB)
	0x005e 00094 (./main.go:36)	PCDATA	$0, $-1
	0x005e 00094 (./main.go:36)	ADDQ	$24, SP
	0x0062 00098 (./main.go:36)	POPQ	BP
	0x0063 00099 (./main.go:36)	RET
	0x0064 00100 (./main.go:36)	NOP
	0x0064 00100 (<autogenerated>:1)	PCDATA	$1, $-1
	0x0064 00100 (<autogenerated>:1)	PCDATA	$0, $-2
	0x0064 00100 (<autogenerated>:1)	CALL	runtime.morestack_noctxt(SB)
	0x0069 00105 (<autogenerated>:1)	PCDATA	$0, $-1
	0x0069 00105 (<autogenerated>:1)	JMP	0
	0x0000 49 3b 66 10 76 5e 55 48 89 e5 48 83 ec 18 48 8d  I;f.v^UH..H...H.
	0x0010 05 00 00 00 00 bb 64 00 00 00 48 89 d9 0f 1f 00  ......d...H.....
	0x0020 e8 00 00 00 00 48 c7 05 00 00 00 00 64 00 00 00  .....H......d...
	0x0030 48 c7 05 00 00 00 00 64 00 00 00 83 3d 00 00 00  H......d....=...
	0x0040 00 00 74 13 e8 00 00 00 00 49 89 03 48 8b 0d 00  ..t......I..H...
	0x0050 00 00 00 49 89 4b 08 48 89 05 00 00 00 00 48 83  ...I.K.H......H.
	0x0060 c4 18 5d c3 e8 00 00 00 00 eb 95                 ..]........
	rel 17+4 t=R_PCREL type:int+0
	rel 33+4 t=R_CALL runtime.makeslice+0
	rel 40+4 t=R_PCREL main.s+4
	rel 51+4 t=R_PCREL main.s+12
	rel 61+4 t=R_PCREL runtime.writeBarrier+-1
	rel 69+4 t=R_CALL runtime.gcWriteBarrier2+0
	rel 79+4 t=R_PCREL main.s+0
	rel 90+4 t=R_PCREL main.s+0
	rel 101+4 t=R_CALL runtime.morestack_noctxt+0
main.fibonacci STEXT size=89 args=0x8 locals=0x18 funcid=0x0 align=0x0
	0x0000 00000 (./main.go:11)	TEXT	main.fibonacci(SB), ABIInternal, $24-8
	0x0000 00000 (./main.go:11)	CMPQ	SP, 16(R14)
	0x0004 00004 (./main.go:11)	PCDATA	$0, $-2
	0x0004 00004 (./main.go:11)	JLS	72
	0x0006 00006 (./main.go:11)	PCDATA	$0, $-1
	0x0006 00006 (./main.go:11)	PUSHQ	BP
	0x0007 00007 (./main.go:11)	MOVQ	SP, BP
	0x000a 00010 (./main.go:11)	SUBQ	$16, SP
	0x000e 00014 (./main.go:11)	FUNCDATA	$0, gclocals·FzY36IO2mY0y4dZ1+Izd/w==(SB)
	0x000e 00014 (./main.go:11)	FUNCDATA	$1, gclocals·FzY36IO2mY0y4dZ1+Izd/w==(SB)
	0x000e 00014 (./main.go:11)	FUNCDATA	$5, main.fibonacci.arginfo1(SB)
	0x000e 00014 (./main.go:11)	FUNCDATA	$6, main.fibonacci.argliveinfo(SB)
	0x000e 00014 (./main.go:11)	PCDATA	$3, $1
	0x000e 00014 (./main.go:12)	CMPQ	AX, $1
	0x0012 00018 (./main.go:12)	JGT	26
	0x0014 00020 (./main.go:13)	ADDQ	$16, SP
	0x0018 00024 (./main.go:13)	POPQ	BP
	0x0019 00025 (./main.go:13)	RET
	0x001a 00026 (./main.go:12)	MOVQ	AX, main.n+32(SP)
	0x001f 00031 (./main.go:12)	PCDATA	$3, $-1
	0x001f 00031 (./main.go:15)	DECQ	AX
	0x0022 00034 (./main.go:15)	PCDATA	$1, $0
	0x0022 00034 (./main.go:15)	CALL	main.fibonacci(SB)
	0x0027 00039 (./main.go:15)	MOVQ	AX, main..autotmp_4+8(SP)
	0x002c 00044 (./main.go:15)	MOVQ	main.n+32(SP), AX
	0x0031 00049 (./main.go:15)	ADDQ	$-2, AX
	0x0035 00053 (./main.go:15)	CALL	main.fibonacci(SB)
	0x003a 00058 (./main.go:15)	MOVQ	main..autotmp_4+8(SP), CX
	0x003f 00063 (./main.go:15)	ADDQ	CX, AX
	0x0042 00066 (./main.go:15)	ADDQ	$16, SP
	0x0046 00070 (./main.go:15)	POPQ	BP
	0x0047 00071 (./main.go:15)	RET
	0x0048 00072 (./main.go:15)	NOP
	0x0048 00072 (./main.go:11)	PCDATA	$1, $-1
	0x0048 00072 (./main.go:11)	PCDATA	$0, $-2
	0x0048 00072 (./main.go:11)	MOVQ	AX, 8(SP)
	0x004d 00077 (./main.go:11)	CALL	runtime.morestack_noctxt(SB)
	0x0052 00082 (./main.go:11)	PCDATA	$0, $-1
	0x0052 00082 (./main.go:11)	MOVQ	8(SP), AX
	0x0057 00087 (./main.go:11)	JMP	0
	0x0000 49 3b 66 10 76 42 55 48 89 e5 48 83 ec 10 48 83  I;f.vBUH..H...H.
	0x0010 f8 01 7f 06 48 83 c4 10 5d c3 48 89 44 24 20 48  ....H...].H.D$ H
	0x0020 ff c8 e8 00 00 00 00 48 89 44 24 08 48 8b 44 24  .......H.D$.H.D$
	0x0030 20 48 83 c0 fe e8 00 00 00 00 48 8b 4c 24 08 48   H........H.L$.H
	0x0040 01 c8 48 83 c4 10 5d c3 48 89 44 24 08 e8 00 00  ..H...].H.D$....
	0x0050 00 00 48 8b 44 24 08 eb a7                       ..H.D$...
	rel 35+4 t=R_CALL main.fibonacci+0
	rel 54+4 t=R_CALL main.fibonacci+0
	rel 78+4 t=R_CALL runtime.morestack_noctxt+0
main.square STEXT nosplit size=5 args=0x8 locals=0x0 funcid=0x0 align=0x0
	0x0000 00000 (./main.go:18)	TEXT	main.square(SB), NOSPLIT|NOFRAME|ABIInternal, $0-8
	0x0000 00000 (./main.go:18)	FUNCDATA	$0, gclocals·FzY36IO2mY0y4dZ1+Izd/w==(SB)
	0x0000 00000 (./main.go:18)	FUNCDATA	$1, gclocals·FzY36IO2mY0y4dZ1+Izd/w==(SB)
	0x0000 00000 (./main.go:18)	FUNCDATA	$5, main.square.arginfo1(SB)
	0x0000 00000 (./main.go:18)	FUNCDATA	$6, main.square.argliveinfo(SB)
	0x0000 00000 (./main.go:18)	PCDATA	$3, $1
	0x0000 00000 (./main.go:19)	IMULQ	AX, AX
	0x0004 00004 (./main.go:19)	RET
	0x0000 48 0f af c0 c3                                   H....
main.sqrt STEXT nosplit size=5 args=0x8 locals=0x0 funcid=0x0 align=0x0
	0x0000 00000 (./main.go:22)	TEXT	main.sqrt(SB), NOSPLIT|NOFRAME|ABIInternal, $0-8
	0x0000 00000 (./main.go:22)	FUNCDATA	$0, gclocals·FzY36IO2mY0y4dZ1+Izd/w==(SB)
	0x0000 00000 (./main.go:22)	FUNCDATA	$1, gclocals·FzY36IO2mY0y4dZ1+Izd/w==(SB)
	0x0000 00000 (./main.go:22)	FUNCDATA	$5, main.sqrt.arginfo1(SB)
	0x0000 00000 (./main.go:22)	FUNCDATA	$6, main.sqrt.argliveinfo(SB)
	0x0000 00000 (./main.go:22)	PCDATA	$3, $1
	0x0000 00000 (./main.go:23)	SQRTSS	X0, X0
	0x0004 00004 (./main.go:23)	RET
	0x0000 f3 0f 51 c0 c3                                   ..Q..
main.main STEXT size=490 args=0x0 locals=0xb0 funcid=0x0 align=0x0
	0x0000 00000 (./main.go:26)	TEXT	main.main(SB), ABIInternal, $176-0
	0x0000 00000 (./main.go:26)	LEAQ	-48(SP), R12
	0x0005 00005 (./main.go:26)	CMPQ	R12, 16(R14)
	0x0009 00009 (./main.go:26)	PCDATA	$0, $-2
	0x0009 00009 (./main.go:26)	JLS	478
	0x000f 00015 (./main.go:26)	PCDATA	$0, $-1
	0x000f 00015 (./main.go:26)	PUSHQ	BP
	0x0010 00016 (./main.go:26)	MOVQ	SP, BP
	0x0013 00019 (./main.go:26)	SUBQ	$168, SP
	0x001a 00026 (./main.go:26)	FUNCDATA	$0, gclocals·n8San6612m6N3vDhLtXTDQ==(SB)
	0x001a 00026 (./main.go:26)	FUNCDATA	$1, gclocals·SMHAWLu0hMOKn/8czxfmcQ==(SB)
	0x001a 00026 (./main.go:26)	FUNCDATA	$2, main.main.stkobj(SB)
	0x001a 00026 (./main.go:27)	XCHGL	AX, AX
	0x001b 00027 (github.com/shopspring/decimal@v1.4.0/decimal.go:102)	XCHGL	AX, AX
	0x001c 00028 (math/big/int.go:89)	MOVQ	$42, main..autotmp_42+64(SP)
	0x0025 00037 (math/big/int.go:91)	MOVB	$0, main..autotmp_44+136(SP)
	0x002d 00045 (math/big/int.go:91)	MOVQ	$0, main..autotmp_44+160(SP)
	0x0039 00057 (math/big/int.go:91)	MOVB	$0, main..autotmp_44+136(SP)
	0x0041 00065 (math/big/int.go:91)	MOVQ	$1, main..autotmp_44+152(SP)
	0x004d 00077 (math/big/int.go:91)	MOVQ	$1, main..autotmp_44+160(SP)
	0x0059 00089 (math/big/int.go:91)	LEAQ	main..autotmp_42+64(SP), DX
	0x005e 00094 (math/big/int.go:91)	MOVQ	DX, main..autotmp_44+144(SP)
	0x0066 00102 (<unknown line number>)	NOP
	0x0066 00102 (github.com/shopspring/decimal@v1.4.0/decimal.go:1472)	LEAQ	main..autotmp_44+136(SP), AX
	0x006e 00110 (github.com/shopspring/decimal@v1.4.0/decimal.go:1472)	MOVL	$-1, BX
	0x0073 00115 (github.com/shopspring/decimal@v1.4.0/decimal.go:1472)	MOVL	$1, CX
	0x0078 00120 (github.com/shopspring/decimal@v1.4.0/decimal.go:1472)	PCDATA	$1, $0
	0x0078 00120 (github.com/shopspring/decimal@v1.4.0/decimal.go:1472)	CALL	github.com/shopspring/decimal.Decimal.string(SB)
	0x007d 00125 (./main.go:28)	MOVUPS	X15, main..autotmp_46+120(SP)
	0x0083 00131 (./main.go:28)	PCDATA	$1, $1
	0x0083 00131 (./main.go:28)	CALL	runtime.convTstring(SB)
	0x0088 00136 (./main.go:28)	LEAQ	type:string(SB), DX
	0x008f 00143 (./main.go:28)	MOVQ	DX, main..autotmp_46+120(SP)
	0x0094 00148 (./main.go:28)	MOVQ	AX, main..autotmp_46+128(SP)
	0x009c 00156 (fmt/print.go:314)	MOVQ	os.Stdout(SB), BX
	0x00a3 00163 (<unknown line number>)	NOP
	0x00a3 00163 (fmt/print.go:314)	LEAQ	go:itab.*os.File,io.Writer(SB), AX
	0x00aa 00170 (fmt/print.go:314)	LEAQ	main..autotmp_46+120(SP), CX
	0x00af 00175 (fmt/print.go:314)	MOVL	$1, DI
	0x00b4 00180 (fmt/print.go:314)	MOVQ	DI, SI
	0x00b7 00183 (fmt/print.go:314)	PCDATA	$1, $0
	0x00b7 00183 (fmt/print.go:314)	CALL	fmt.Fprintln(SB)
	0x00bc 00188 (./main.go:29)	MOVL	$3, AX
	0x00c1 00193 (./main.go:29)	CALL	main.fibonacci(SB)
	0x00c6 00198 (./main.go:29)	MOVQ	AX, main.res+56(SP)
	0x00cb 00203 (./main.go:30)	MOVUPS	X15, main..autotmp_49+104(SP)
	0x00d1 00209 (./main.go:30)	PCDATA	$1, $2
	0x00d1 00209 (./main.go:30)	CALL	runtime.convT64(SB)
	0x00d6 00214 (./main.go:30)	LEAQ	type:int(SB), DX
	0x00dd 00221 (./main.go:30)	MOVQ	DX, main..autotmp_49+104(SP)
	0x00e2 00226 (./main.go:30)	MOVQ	AX, main..autotmp_49+112(SP)
	0x00e7 00231 (./main.go:31)	MOVQ	main.res+56(SP), DX
	0x00ec 00236 (./main.go:31)	XORPS	X0, X0
	0x00ef 00239 (./main.go:31)	CVTSQ2SS	DX, X0
	0x00f4 00244 (fmt/print.go:314)	MOVQ	os.Stdout(SB), BX
	0x00fb 00251 (./main.go:23)	SQRTSS	X0, X0
	0x00ff 00255 (./main.go:31)	MOVL	X0, SI
	0x0103 00259 (./main.go:31)	MOVL	SI, main..autotmp_83+44(SP)
	0x0107 00263 (./main.go:19)	IMULQ	DX, DX
	0x010b 00267 (./main.go:19)	MOVQ	DX, main.~r0+48(SP)
	0x0110 00272 (<unknown line number>)	NOP
	0x0110 00272 (fmt/print.go:314)	LEAQ	go:itab.*os.File,io.Writer(SB), AX
	0x0117 00279 (fmt/print.go:314)	LEAQ	main..autotmp_49+104(SP), CX
	0x011c 00284 (fmt/print.go:314)	MOVL	$1, DI
	0x0121 00289 (fmt/print.go:314)	MOVQ	DI, SI
	0x0124 00292 (fmt/print.go:314)	PCDATA	$1, $0
	0x0124 00292 (fmt/print.go:314)	CALL	fmt.Fprintln(SB)
	0x0129 00297 (<unknown line number>)	NOP
	0x0129 00297 (./main.go:31)	MOVUPS	X15, main..autotmp_52+88(SP)
	0x012f 00303 (./main.go:31)	MOVL	main..autotmp_83+44(SP), AX
	0x0133 00307 (./main.go:31)	PCDATA	$1, $3
	0x0133 00307 (./main.go:31)	CALL	runtime.convT32(SB)
	0x0138 00312 (./main.go:31)	LEAQ	type:float32(SB), DX
	0x013f 00319 (./main.go:31)	MOVQ	DX, main..autotmp_52+88(SP)
	0x0144 00324 (./main.go:31)	MOVQ	AX, main..autotmp_52+96(SP)
	0x0149 00329 (fmt/print.go:314)	MOVQ	os.Stdout(SB), BX
	0x0150 00336 (<unknown line number>)	NOP
	0x0150 00336 (fmt/print.go:314)	LEAQ	go:itab.*os.File,io.Writer(SB), AX
	0x0157 00343 (fmt/print.go:314)	LEAQ	main..autotmp_52+88(SP), CX
	0x015c 00348 (fmt/print.go:314)	MOVL	$1, DI
	0x0161 00353 (fmt/print.go:314)	MOVQ	DI, SI
	0x0164 00356 (fmt/print.go:314)	PCDATA	$1, $0
	0x0164 00356 (fmt/print.go:314)	CALL	fmt.Fprintln(SB)
	0x0169 00361 (<unknown line number>)	NOP
	0x0169 00361 (./main.go:32)	MOVUPS	X15, main..autotmp_57+72(SP)
	0x016f 00367 (./main.go:32)	MOVQ	main.~r0+48(SP), AX
	0x0174 00372 (./main.go:32)	PCDATA	$1, $4
	0x0174 00372 (./main.go:32)	CALL	runtime.convT64(SB)
	0x0179 00377 (./main.go:32)	LEAQ	type:int(SB), DX
	0x0180 00384 (./main.go:32)	MOVQ	DX, main..autotmp_57+72(SP)
	0x0185 00389 (./main.go:32)	MOVQ	AX, main..autotmp_57+80(SP)
	0x018a 00394 (fmt/print.go:314)	MOVQ	os.Stdout(SB), BX
	0x0191 00401 (<unknown line number>)	NOP
	0x0191 00401 (fmt/print.go:314)	LEAQ	go:itab.*os.File,io.Writer(SB), AX
	0x0198 00408 (fmt/print.go:314)	LEAQ	main..autotmp_57+72(SP), CX
	0x019d 00413 (fmt/print.go:314)	MOVL	$1, DI
	0x01a2 00418 (fmt/print.go:314)	MOVQ	DI, SI
	0x01a5 00421 (fmt/print.go:314)	PCDATA	$1, $0
	0x01a5 00421 (fmt/print.go:314)	CALL	fmt.Fprintln(SB)
	0x01aa 00426 (./main.go:33)	MOVQ	main.s+8(SB), CX
	0x01b1 00433 (./main.go:33)	CMPQ	CX, $42
	0x01b5 00437 (./main.go:33)	JLS	467
	0x01b7 00439 (./main.go:33)	MOVQ	main.s(SB), CX
	0x01be 00446 (./main.go:33)	MOVQ	336(CX), AX
	0x01c5 00453 (./main.go:33)	CALL	os.Exit(SB)
	0x01ca 00458 (./main.go:34)	ADDQ	$168, SP
	0x01d1 00465 (./main.go:34)	POPQ	BP
	0x01d2 00466 (./main.go:34)	RET
	0x01d3 00467 (./main.go:33)	MOVL	$42, AX
	0x01d8 00472 (./main.go:33)	CALL	runtime.panicIndex(SB)
	0x01dd 00477 (./main.go:33)	XCHGL	AX, AX
	0x01de 00478 (./main.go:33)	NOP
	0x01de 00478 (./main.go:26)	PCDATA	$1, $-1
	0x01de 00478 (./main.go:26)	PCDATA	$0, $-2
	0x01de 00478 (./main.go:26)	NOP
	0x01e0 00480 (./main.go:26)	CALL	runtime.morestack_noctxt(SB)
	0x01e5 00485 (./main.go:26)	PCDATA	$0, $-1
	0x01e5 00485 (./main.go:26)	JMP	0
	0x0000 4c 8d 64 24 d0 4d 3b 66 10 0f 86 cf 01 00 00 55  L.d$.M;f.......U
	0x0010 48 89 e5 48 81 ec a8 00 00 00 90 90 48 c7 44 24  H..H........H.D$
	0x0020 40 2a 00 00 00 c6 84 24 88 00 00 00 00 48 c7 84  @*.....$.....H..
	0x0030 24 a0 00 00 00 00 00 00 00 c6 84 24 88 00 00 00  $..........$....
	0x0040 00 48 c7 84 24 98 00 00 00 01 00 00 00 48 c7 84  .H..$........H..
	0x0050 24 a0 00 00 00 01 00 00 00 48 8d 54 24 40 48 89  $........H.T$@H.
	0x0060 94 24 90 00 00 00 48 8d 84 24 88 00 00 00 bb ff  .$....H..$......
	0x0070 ff ff ff b9 01 00 00 00 e8 00 00 00 00 44 0f 11  .............D..
	0x0080 7c 24 78 e8 00 00 00 00 48 8d 15 00 00 00 00 48  |$x.....H......H
	0x0090 89 54 24 78 48 89 84 24 80 00 00 00 48 8b 1d 00  .T$xH..$....H...
	0x00a0 00 00 00 48 8d 05 00 00 00 00 48 8d 4c 24 78 bf  ...H......H.L$x.
	0x00b0 01 00 00 00 48 89 fe e8 00 00 00 00 b8 03 00 00  ....H...........
	0x00c0 00 e8 00 00 00 00 48 89 44 24 38 44 0f 11 7c 24  ......H.D$8D..|$
	0x00d0 68 e8 00 00 00 00 48 8d 15 00 00 00 00 48 89 54  h.....H......H.T
	0x00e0 24 68 48 89 44 24 70 48 8b 54 24 38 0f 57 c0 f3  $hH.D$pH.T$8.W..
	0x00f0 48 0f 2a c2 48 8b 1d 00 00 00 00 f3 0f 51 c0 66  H.*.H........Q.f
	0x0100 0f 7e c6 89 74 24 2c 48 0f af d2 48 89 54 24 30  .~..t$,H...H.T$0
	0x0110 48 8d 05 00 00 00 00 48 8d 4c 24 68 bf 01 00 00  H......H.L$h....
	0x0120 00 48 89 fe e8 00 00 00 00 44 0f 11 7c 24 58 8b  .H.......D..|$X.
	0x0130 44 24 2c e8 00 00 00 00 48 8d 15 00 00 00 00 48  D$,.....H......H
	0x0140 89 54 24 58 48 89 44 24 60 48 8b 1d 00 00 00 00  .T$XH.D$`H......
	0x0150 48 8d 05 00 00 00 00 48 8d 4c 24 58 bf 01 00 00  H......H.L$X....
	0x0160 00 48 89 fe e8 00 00 00 00 44 0f 11 7c 24 48 48  .H.......D..|$HH
	0x0170 8b 44 24 30 e8 00 00 00 00 48 8d 15 00 00 00 00  .D$0.....H......
	0x0180 48 89 54 24 48 48 89 44 24 50 48 8b 1d 00 00 00  H.T$HH.D$PH.....
	0x0190 00 48 8d 05 00 00 00 00 48 8d 4c 24 48 bf 01 00  .H......H.L$H...
	0x01a0 00 00 48 89 fe e8 00 00 00 00 48 8b 0d 00 00 00  ..H.......H.....
	0x01b0 00 48 83 f9 2a 76 1c 48 8b 0d 00 00 00 00 48 8b  .H..*v.H......H.
	0x01c0 81 50 01 00 00 e8 00 00 00 00 48 81 c4 a8 00 00  .P........H.....
	0x01d0 00 5d c3 b8 2a 00 00 00 e8 00 00 00 00 90 66 90  .]..*.........f.
	0x01e0 e8 00 00 00 00 e9 16 fe ff ff                    ..........
	rel 3+0 t=R_USEIFACE type:string+0
	rel 3+0 t=R_USEIFACE type:*os.File+0
	rel 3+0 t=R_USEIFACE type:int+0
	rel 3+0 t=R_USEIFACE type:*os.File+0
	rel 3+0 t=R_USEIFACE type:float32+0
	rel 3+0 t=R_USEIFACE type:*os.File+0
	rel 3+0 t=R_USEIFACE type:int+0
	rel 3+0 t=R_USEIFACE type:*os.File+0
	rel 121+4 t=R_CALL github.com/shopspring/decimal.Decimal.string+0
	rel 132+4 t=R_CALL runtime.convTstring+0
	rel 139+4 t=R_PCREL type:string+0
	rel 159+4 t=R_PCREL os.Stdout+0
	rel 166+4 t=R_PCREL go:itab.*os.File,io.Writer+0
	rel 184+4 t=R_CALL fmt.Fprintln+0
	rel 194+4 t=R_CALL main.fibonacci+0
	rel 210+4 t=R_CALL runtime.convT64+0
	rel 217+4 t=R_PCREL type:int+0
	rel 247+4 t=R_PCREL os.Stdout+0
	rel 275+4 t=R_PCREL go:itab.*os.File,io.Writer+0
	rel 293+4 t=R_CALL fmt.Fprintln+0
	rel 308+4 t=R_CALL runtime.convT32+0
	rel 315+4 t=R_PCREL type:float32+0
	rel 332+4 t=R_PCREL os.Stdout+0
	rel 339+4 t=R_PCREL go:itab.*os.File,io.Writer+0
	rel 357+4 t=R_CALL fmt.Fprintln+0
	rel 373+4 t=R_CALL runtime.convT64+0
	rel 380+4 t=R_PCREL type:int+0
	rel 397+4 t=R_PCREL os.Stdout+0
	rel 404+4 t=R_PCREL go:itab.*os.File,io.Writer+0
	rel 422+4 t=R_CALL fmt.Fprintln+0
	rel 429+4 t=R_PCREL main.s+8
	rel 442+4 t=R_PCREL main.s+0
	rel 454+4 t=R_CALL os.Exit+0
	rel 473+4 t=R_CALL runtime.panicIndex+0
	rel 481+4 t=R_CALL runtime.morestack_noctxt+0
type:.eq.sync/atomic.Pointer[os.dirInfo] STEXT dupok nosplit size=10 args=0x10 locals=0x0 funcid=0x0 align=0x0
	0x0000 00000 (<autogenerated>:1)	TEXT	type:.eq.sync/atomic.Pointer[os.dirInfo](SB), DUPOK|NOSPLIT|NOFRAME|ABIInternal, $0-16
	0x0000 00000 (<autogenerated>:1)	FUNCDATA	$0, gclocals·rJbr+btbFJy3NLIRCgNSZQ==(SB)
	0x0000 00000 (<autogenerated>:1)	FUNCDATA	$1, gclocals·ISb46fRPFoZ9pIfykFK/kQ==(SB)
	0x0000 00000 (<autogenerated>:1)	FUNCDATA	$5, type:.eq.sync/atomic.Pointer[os.dirInfo].arginfo1(SB)
	0x0000 00000 (<autogenerated>:1)	FUNCDATA	$6, type:.eq.sync/atomic.Pointer[os.dirInfo].argliveinfo(SB)
	0x0000 00000 (<autogenerated>:1)	PCDATA	$3, $1
	0x0000 00000 (<autogenerated>:1)	MOVQ	(AX), CX
	0x0003 00003 (<autogenerated>:1)	CMPQ	(BX), CX
	0x0006 00006 (<autogenerated>:1)	SETEQ	AL
	0x0009 00009 (<autogenerated>:1)	RET
	0x0000 48 8b 08 48 39 0b 0f 94 c0 c3                    H..H9.....
go:cuinfo.producer.main SDWARFCUINFO dupok size=0
	0x0000 72 65 67 61 62 69                                regabi
go:cuinfo.packagename.main SDWARFCUINFO dupok size=0
	0x0000 6d 61 69 6e                                      main
go:info.math.Sqrt$abstract SDWARFABSFCN dupok size=23
	0x0000 05 6d 61 74 68 2e 53 71 72 74 00 01 5d 01 22 78  .math.Sqrt..]."x
	0x0010 00 00 00 00 00 00 00                             .......
	rel 0+0 t=R_USETYPE type:float64+0
	rel 18+4 t=R_DWARFSECREF go:info.float64+0
go:info.github.com/shopspring/decimal.New$abstract SDWARFABSFCN dupok size=61
	0x0000 05 67 69 74 68 75 62 2e 63 6f 6d 2f 73 68 6f 70  .github.com/shop
	0x0010 73 70 72 69 6e 67 2f 64 65 63 69 6d 61 6c 2e 4e  spring/decimal.N
	0x0020 65 77 00 01 64 01 22 76 61 6c 75 65 00 00 00 00  ew..d."value....
	0x0030 00 00 22 65 78 70 00 00 00 00 00 00 00           .."exp.......
	rel 0+0 t=R_USETYPE type:github.com/shopspring/decimal.Decimal+0
	rel 0+0 t=R_USETYPE type:int32+0
	rel 0+0 t=R_USETYPE type:int64+0
	rel 46+4 t=R_DWARFSECREF go:info.int64+0
	rel 56+4 t=R_DWARFSECREF go:info.int32+0
go:info.github.com/shopspring/decimal.Decimal.String$abstract SDWARFABSFCN dupok size=59
	0x0000 05 67 69 74 68 75 62 2e 63 6f 6d 2f 73 68 6f 70  .github.com/shop
	0x0010 73 70 72 69 6e 67 2f 64 65 63 69 6d 61 6c 2e 44  spring/decimal.D
	0x0020 65 63 69 6d 61 6c 2e 53 74 72 69 6e 67 00 01 bf  ecimal.String...
	0x0030 0b 01 22 64 00 00 00 00 00 00 00                 .."d.......
	rel 0+0 t=R_USETYPE type:github.com/shopspring/decimal.Decimal+0
	rel 0+0 t=R_USETYPE type:string+0
	rel 54+4 t=R_DWARFSECREF go:info.github.com/shopspring/decimal.Decimal+0
go:info.fmt.Println$abstract SDWARFABSFCN dupok size=44
	0x0000 05 66 6d 74 2e 50 72 69 6e 74 6c 6e 00 01 b9 02  .fmt.Println....
	0x0010 01 22 61 00 00 00 00 00 00 22 6e 00 01 00 00 00  ."a......"n.....
	0x0020 00 22 65 72 72 00 01 00 00 00 00 00              ."err.......
	rel 0+0 t=R_USETYPE type:[]interface {}+0
	rel 0+0 t=R_USETYPE type:error+0
	rel 0+0 t=R_USETYPE type:int+0
	rel 21+4 t=R_DWARFSECREF go:info.[]interface {}+0
	rel 29+4 t=R_DWARFSECREF go:info.int+0
	rel 39+4 t=R_DWARFSECREF go:info.error+0
go:itab.*os.File,io.Writer SRODATA dupok size=32
	0x0000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0010 c1 d7 bc cc 00 00 00 00 00 00 00 00 00 00 00 00  ................
	rel 0+8 t=R_ADDR type:io.Writer+0
	rel 8+8 t=R_ADDR type:*os.File+0
	rel 24+8 t=RelocType(-32767) os.(*File).Write+0
sync/atomic..dict.Pointer[os.dirInfo] SRODATA dupok size=128
	0x0000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0010 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0040 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0050 00 00 00 00 00 00 00 00                          ........
	rel 0+0 t=R_USEIFACE type:*os.dirInfo+0
	rel 0+0 t=R_USEIFACE type:*os.dirInfo+0
	rel 0+0 t=R_USEIFACE type:*os.dirInfo+0
	rel 0+0 t=R_USEIFACE type:*os.dirInfo+0
	rel 0+0 t=R_USEIFACE type:*os.dirInfo+0
	rel 0+0 t=R_USEIFACE type:*os.dirInfo+0
	rel 0+0 t=R_USEIFACE type:unsafe.Pointer+0
	rel 0+0 t=R_USEIFACE type:*sync/atomic.Pointer[os.dirInfo]+0
	rel 0+8 t=R_ADDR type:*sync/atomic.Pointer[os.dirInfo]+0
	rel 0+0 t=R_USEIFACE type:*os.dirInfo+0
	rel 0+0 t=R_USEIFACE type:unsafe.Pointer+0
	rel 0+0 t=R_USEIFACE type:*sync/atomic.Pointer[os.dirInfo]+0
	rel 0+0 t=R_USEIFACE type:*sync/atomic.Pointer[os.dirInfo]+0
	rel 0+0 t=R_USEIFACE type:unsafe.Pointer+0
	rel 0+0 t=R_USEIFACE type:*os.dirInfo+0
	rel 0+0 t=R_USEIFACE type:*os.dirInfo+0
	rel 0+0 t=R_USEIFACE type:*os.dirInfo+0
	rel 0+0 t=R_USEIFACE type:*os.dirInfo+0
	rel 0+0 t=R_USEIFACE type:unsafe.Pointer+0
	rel 0+0 t=R_USEIFACE type:*sync/atomic.Pointer[os.dirInfo]+0
	rel 0+0 t=R_USEIFACE type:unsafe.Pointer+0
	rel 0+0 t=R_USEIFACE type:*os.dirInfo+0
	rel 8+8 t=R_ADDR type:*os.dirInfo+0
	rel 16+8 t=R_ADDR type:*os.dirInfo+0
	rel 24+8 t=R_ADDR type:*sync/atomic.Pointer[os.dirInfo]+0
	rel 32+8 t=R_ADDR type:*os.dirInfo+0
	rel 40+8 t=R_ADDR type:*sync/atomic.Pointer[os.dirInfo]+0
	rel 48+8 t=R_ADDR type:*os.dirInfo+0
	rel 56+8 t=R_ADDR type:*os.dirInfo+0
	rel 64+8 t=R_ADDR type:*os.dirInfo+0
	rel 72+8 t=R_ADDR type:*sync/atomic.Pointer[os.dirInfo]+0
	rel 80+8 t=R_ADDR type:*os.dirInfo+0
go:info.main.sqrt$abstract SDWARFABSFCN dupok size=23
	0x0000 05 6d 61 69 6e 2e 73 71 72 74 00 01 16 01 22 78  .main.sqrt...."x
	0x0010 00 00 00 00 00 00 00                             .......
	rel 18+4 t=R_DWARFSECREF go:info.float32+0
go:info.main.square$abstract SDWARFABSFCN dupok size=25
	0x0000 05 6d 61 69 6e 2e 73 71 75 61 72 65 00 01 12 01  .main.square....
	0x0010 22 6e 00 00 00 00 00 00 00                       "n.......
	rel 20+4 t=R_DWARFSECREF go:info.int+0
go:info.math/big.NewInt$abstract SDWARFABSFCN dupok size=47
	0x0000 05 6d 61 74 68 2f 62 69 67 2e 4e 65 77 49 6e 74  .math/big.NewInt
	0x0010 00 01 4d 01 22 78 00 00 00 00 00 00 21 75 00 50  ..M."x......!u.P
	0x0020 00 00 00 00 21 61 62 73 00 54 00 00 00 00 00     ....!abs.T.....
	rel 0+0 t=R_USETYPE type:*math/big.Int+0
	rel 0+0 t=R_USETYPE type:[]math/big.Word+0
	rel 0+0 t=R_USETYPE type:int64+0
	rel 0+0 t=R_USETYPE type:uint64+0
	rel 24+4 t=R_DWARFSECREF go:info.int64+0
	rel 32+4 t=R_DWARFSECREF go:info.uint64+0
	rel 42+4 t=R_DWARFSECREF go:info.[]math/big.Word+0
main..inittask SNOPTRDATA size=16
	0x0000 00 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00  ................
	rel 0+0 t=R_INITORDER fmt..inittask+0
	rel 0+0 t=R_INITORDER math..inittask+0
	rel 0+0 t=R_INITORDER os..inittask+0
	rel 0+0 t=R_INITORDER github.com/shopspring/decimal..inittask+0
	rel 8+8 t=R_ADDR main.init+0
runtime.memequal64·f SRODATA dupok size=8
	0x0000 00 00 00 00 00 00 00 00                          ........
	rel 0+8 t=R_ADDR runtime.memequal64+0
runtime.gcbits.0100000000000000 SRODATA dupok size=8
	0x0000 01 00 00 00 00 00 00 00                          ........
type:.namedata.*atomic.Pointer[os.dirInfo]. SRODATA dupok size=29
	0x0000 01 1b 2a 61 74 6f 6d 69 63 2e 50 6f 69 6e 74 65  ..*atomic.Pointe
	0x0010 72 5b 6f 73 2e 64 69 72 49 6e 66 6f 5d           r[os.dirInfo]
type:.eqfunc.sync/atomic.Pointer[os.dirInfo] SRODATA dupok size=8
	0x0000 00 00 00 00 00 00 00 00                          ........
	rel 0+8 t=R_ADDR type:.eq.sync/atomic.Pointer[os.dirInfo]+0
runtime.memequal0·f SRODATA dupok size=8
	0x0000 00 00 00 00 00 00 00 00                          ........
	rel 0+8 t=R_ADDR runtime.memequal0+0
type:.namedata.*[0]*os.dirInfo- SRODATA dupok size=17
	0x0000 00 0f 2a 5b 30 5d 2a 6f 73 2e 64 69 72 49 6e 66  ..*[0]*os.dirInf
	0x0010 6f                                               o
type:*[0]*os.dirInfo SRODATA dupok size=56
	0x0000 08 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00  ................
	0x0010 a6 08 19 82 08 08 08 36 00 00 00 00 00 00 00 00  .......6........
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 00 00 00 00 00 00 00 00                          ........
	rel 24+8 t=R_ADDR runtime.memequal64·f+0
	rel 32+8 t=R_ADDR runtime.gcbits.0100000000000000+0
	rel 40+4 t=R_ADDROFF type:.namedata.*[0]*os.dirInfo-+0
	rel 48+8 t=R_ADDR type:[0]*os.dirInfo+0
runtime.gcbits. SRODATA dupok size=0
type:.namedata.*[]*os.dirInfo- SRODATA dupok size=16
	0x0000 00 0e 2a 5b 5d 2a 6f 73 2e 64 69 72 49 6e 66 6f  ..*[]*os.dirInfo
type:*[]*os.dirInfo SRODATA dupok size=56
	0x0000 08 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00  ................
	0x0010 9d 8a 6c 8a 08 08 08 36 00 00 00 00 00 00 00 00  ..l....6........
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 00 00 00 00 00 00 00 00                          ........
	rel 24+8 t=R_ADDR runtime.memequal64·f+0
	rel 32+8 t=R_ADDR runtime.gcbits.0100000000000000+0
	rel 40+4 t=R_ADDROFF type:.namedata.*[]*os.dirInfo-+0
	rel 48+8 t=R_ADDR type:[]*os.dirInfo+0
type:[]*os.dirInfo SRODATA dupok size=56
	0x0000 18 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00  ................
	0x0010 55 53 05 41 02 08 08 17 00 00 00 00 00 00 00 00  US.A............
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 00 00 00 00 00 00 00 00                          ........
	rel 32+8 t=R_ADDR runtime.gcbits.0100000000000000+0
	rel 40+4 t=R_ADDROFF type:.namedata.*[]*os.dirInfo-+0
	rel 44+4 t=RelocType(-32763) type:*[]*os.dirInfo+0
	rel 48+8 t=R_ADDR type:*os.dirInfo+0
type:[0]*os.dirInfo SRODATA dupok size=72
	0x0000 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0010 64 82 13 1a 0a 08 08 11 00 00 00 00 00 00 00 00  d...............
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0040 00 00 00 00 00 00 00 00                          ........
	rel 24+8 t=R_ADDR runtime.memequal0·f+0
	rel 32+8 t=R_ADDR runtime.gcbits.+0
	rel 40+4 t=R_ADDROFF type:.namedata.*[0]*os.dirInfo-+0
	rel 44+4 t=RelocType(-32763) type:*[0]*os.dirInfo+0
	rel 48+8 t=R_ADDR type:*os.dirInfo+0
	rel 56+8 t=R_ADDR type:[]*os.dirInfo+0
type:.importpath.sync/atomic. SRODATA dupok size=13
	0x0000 00 0b 73 79 6e 63 2f 61 74 6f 6d 69 63           ..sync/atomic
type:.namedata._- SRODATA dupok size=3
	0x0000 00 01 5f                                         .._
type:.namedata.v- SRODATA dupok size=3
	0x0000 00 01 76                                         ..v
type:sync/atomic.Pointer[os.dirInfo] SRODATA dupok size=168
	0x0000 08 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00  ................
	0x0010 96 c3 42 f6 07 08 08 19 00 00 00 00 00 00 00 00  ..B.............
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0040 03 00 00 00 00 00 00 00 03 00 00 00 00 00 00 00  ................
	0x0050 00 00 00 00 00 00 00 00 58 00 00 00 00 00 00 00  ........X.......
	0x0060 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0070 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0080 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0090 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x00a0 00 00 00 00 00 00 00 00                          ........
	rel 24+8 t=R_ADDR type:.eqfunc.sync/atomic.Pointer[os.dirInfo]+0
	rel 32+8 t=R_ADDR runtime.gcbits.0100000000000000+0
	rel 40+4 t=R_ADDROFF type:.namedata.*atomic.Pointer[os.dirInfo].+0
	rel 44+4 t=R_ADDROFF type:*sync/atomic.Pointer[os.dirInfo]+0
	rel 48+8 t=R_ADDR type:.importpath.sync/atomic.+0
	rel 56+8 t=R_ADDR type:sync/atomic.Pointer[os.dirInfo]+96
	rel 80+4 t=R_ADDROFF type:.importpath.sync/atomic.+0
	rel 96+8 t=R_ADDR type:.namedata._-+0
	rel 104+8 t=R_ADDR type:[0]*os.dirInfo+0
	rel 120+8 t=R_ADDR type:.namedata._-+0
	rel 128+8 t=R_ADDR type:sync/atomic.noCopy+0
	rel 144+8 t=R_ADDR type:.namedata.v-+0
	rel 152+8 t=R_ADDR type:unsafe.Pointer+0
type:.namedata.*func(*atomic.Pointer[os.dirInfo], *os.dirInfo, *os.dirInfo) bool- SRODATA dupok size=67
	0x0000 00 41 2a 66 75 6e 63 28 2a 61 74 6f 6d 69 63 2e  .A*func(*atomic.
	0x0010 50 6f 69 6e 74 65 72 5b 6f 73 2e 64 69 72 49 6e  Pointer[os.dirIn
	0x0020 66 6f 5d 2c 20 2a 6f 73 2e 64 69 72 49 6e 66 6f  fo], *os.dirInfo
	0x0030 2c 20 2a 6f 73 2e 64 69 72 49 6e 66 6f 29 20 62  , *os.dirInfo) b
	0x0040 6f 6f 6c                                         ool
type:*func(*sync/atomic.Pointer[os.dirInfo], *os.dirInfo, *os.dirInfo) bool SRODATA dupok size=56
	0x0000 08 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00  ................
	0x0010 fe 18 d0 29 08 08 08 36 00 00 00 00 00 00 00 00  ...)...6........
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 00 00 00 00 00 00 00 00                          ........
	rel 24+8 t=R_ADDR runtime.memequal64·f+0
	rel 32+8 t=R_ADDR runtime.gcbits.0100000000000000+0
	rel 40+4 t=R_ADDROFF type:.namedata.*func(*atomic.Pointer[os.dirInfo], *os.dirInfo, *os.dirInfo) bool-+0
	rel 48+8 t=R_ADDR type:func(*sync/atomic.Pointer[os.dirInfo], *os.dirInfo, *os.dirInfo) bool+0
type:func(*sync/atomic.Pointer[os.dirInfo], *os.dirInfo, *os.dirInfo) bool SRODATA dupok size=88
	0x0000 08 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00  ................
	0x0010 b9 bc ac c6 02 08 08 33 00 00 00 00 00 00 00 00  .......3........
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 03 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0040 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0050 00 00 00 00 00 00 00 00                          ........
	rel 32+8 t=R_ADDR runtime.gcbits.0100000000000000+0
	rel 40+4 t=R_ADDROFF type:.namedata.*func(*atomic.Pointer[os.dirInfo], *os.dirInfo, *os.dirInfo) bool-+0
	rel 44+4 t=RelocType(-32763) type:*func(*sync/atomic.Pointer[os.dirInfo], *os.dirInfo, *os.dirInfo) bool+0
	rel 56+8 t=R_ADDR type:*sync/atomic.Pointer[os.dirInfo]+0
	rel 64+8 t=R_ADDR type:*os.dirInfo+0
	rel 72+8 t=R_ADDR type:*os.dirInfo+0
	rel 80+8 t=R_ADDR type:bool+0
type:.namedata.*func(*atomic.Pointer[os.dirInfo]) *os.dirInfo- SRODATA dupok size=48
	0x0000 00 2e 2a 66 75 6e 63 28 2a 61 74 6f 6d 69 63 2e  ..*func(*atomic.
	0x0010 50 6f 69 6e 74 65 72 5b 6f 73 2e 64 69 72 49 6e  Pointer[os.dirIn
	0x0020 66 6f 5d 29 20 2a 6f 73 2e 64 69 72 49 6e 66 6f  fo]) *os.dirInfo
type:*func(*sync/atomic.Pointer[os.dirInfo]) *os.dirInfo SRODATA dupok size=56
	0x0000 08 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00  ................
	0x0010 59 bb 31 13 08 08 08 36 00 00 00 00 00 00 00 00  Y.1....6........
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 00 00 00 00 00 00 00 00                          ........
	rel 24+8 t=R_ADDR runtime.memequal64·f+0
	rel 32+8 t=R_ADDR runtime.gcbits.0100000000000000+0
	rel 40+4 t=R_ADDROFF type:.namedata.*func(*atomic.Pointer[os.dirInfo]) *os.dirInfo-+0
	rel 48+8 t=R_ADDR type:func(*sync/atomic.Pointer[os.dirInfo]) *os.dirInfo+0
type:func(*sync/atomic.Pointer[os.dirInfo]) *os.dirInfo SRODATA dupok size=72
	0x0000 08 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00  ................
	0x0010 d5 d6 af 2f 02 08 08 33 00 00 00 00 00 00 00 00  .../...3........
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 01 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0040 00 00 00 00 00 00 00 00                          ........
	rel 32+8 t=R_ADDR runtime.gcbits.0100000000000000+0
	rel 40+4 t=R_ADDROFF type:.namedata.*func(*atomic.Pointer[os.dirInfo]) *os.dirInfo-+0
	rel 44+4 t=RelocType(-32763) type:*func(*sync/atomic.Pointer[os.dirInfo]) *os.dirInfo+0
	rel 56+8 t=R_ADDR type:*sync/atomic.Pointer[os.dirInfo]+0
	rel 64+8 t=R_ADDR type:*os.dirInfo+0
type:.namedata.*func(*atomic.Pointer[os.dirInfo], *os.dirInfo)- SRODATA dupok size=49
	0x0000 00 2f 2a 66 75 6e 63 28 2a 61 74 6f 6d 69 63 2e  ./*func(*atomic.
	0x0010 50 6f 69 6e 74 65 72 5b 6f 73 2e 64 69 72 49 6e  Pointer[os.dirIn
	0x0020 66 6f 5d 2c 20 2a 6f 73 2e 64 69 72 49 6e 66 6f  fo], *os.dirInfo
	0x0030 29                                               )
type:*func(*sync/atomic.Pointer[os.dirInfo], *os.dirInfo) SRODATA dupok size=56
	0x0000 08 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00  ................
	0x0010 73 91 45 a4 08 08 08 36 00 00 00 00 00 00 00 00  s.E....6........
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 00 00 00 00 00 00 00 00                          ........
	rel 24+8 t=R_ADDR runtime.memequal64·f+0
	rel 32+8 t=R_ADDR runtime.gcbits.0100000000000000+0
	rel 40+4 t=R_ADDROFF type:.namedata.*func(*atomic.Pointer[os.dirInfo], *os.dirInfo)-+0
	rel 48+8 t=R_ADDR type:func(*sync/atomic.Pointer[os.dirInfo], *os.dirInfo)+0
type:func(*sync/atomic.Pointer[os.dirInfo], *os.dirInfo) SRODATA dupok size=72
	0x0000 08 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00  ................
	0x0010 a7 d9 da 27 02 08 08 33 00 00 00 00 00 00 00 00  ...'...3........
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0040 00 00 00 00 00 00 00 00                          ........
	rel 32+8 t=R_ADDR runtime.gcbits.0100000000000000+0
	rel 40+4 t=R_ADDROFF type:.namedata.*func(*atomic.Pointer[os.dirInfo], *os.dirInfo)-+0
	rel 44+4 t=RelocType(-32763) type:*func(*sync/atomic.Pointer[os.dirInfo], *os.dirInfo)+0
	rel 56+8 t=R_ADDR type:*sync/atomic.Pointer[os.dirInfo]+0
	rel 64+8 t=R_ADDR type:*os.dirInfo+0
type:.namedata.*func(*atomic.Pointer[os.dirInfo], *os.dirInfo) *os.dirInfo- SRODATA dupok size=61
	0x0000 00 3b 2a 66 75 6e 63 28 2a 61 74 6f 6d 69 63 2e  .;*func(*atomic.
	0x0010 50 6f 69 6e 74 65 72 5b 6f 73 2e 64 69 72 49 6e  Pointer[os.dirIn
	0x0020 66 6f 5d 2c 20 2a 6f 73 2e 64 69 72 49 6e 66 6f  fo], *os.dirInfo
	0x0030 29 20 2a 6f 73 2e 64 69 72 49 6e 66 6f           ) *os.dirInfo
type:*func(*sync/atomic.Pointer[os.dirInfo], *os.dirInfo) *os.dirInfo SRODATA dupok size=56
	0x0000 08 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00  ................
	0x0010 46 0b cc 77 08 08 08 36 00 00 00 00 00 00 00 00  F..w...6........
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 00 00 00 00 00 00 00 00                          ........
	rel 24+8 t=R_ADDR runtime.memequal64·f+0
	rel 32+8 t=R_ADDR runtime.gcbits.0100000000000000+0
	rel 40+4 t=R_ADDROFF type:.namedata.*func(*atomic.Pointer[os.dirInfo], *os.dirInfo) *os.dirInfo-+0
	rel 48+8 t=R_ADDR type:func(*sync/atomic.Pointer[os.dirInfo], *os.dirInfo) *os.dirInfo+0
type:func(*sync/atomic.Pointer[os.dirInfo], *os.dirInfo) *os.dirInfo SRODATA dupok size=80
	0x0000 08 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00  ................
	0x0010 3a 47 9e 50 02 08 08 33 00 00 00 00 00 00 00 00  :G.P...3........
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 02 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0040 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	rel 32+8 t=R_ADDR runtime.gcbits.0100000000000000+0
	rel 40+4 t=R_ADDROFF type:.namedata.*func(*atomic.Pointer[os.dirInfo], *os.dirInfo) *os.dirInfo-+0
	rel 44+4 t=RelocType(-32763) type:*func(*sync/atomic.Pointer[os.dirInfo], *os.dirInfo) *os.dirInfo+0
	rel 56+8 t=R_ADDR type:*sync/atomic.Pointer[os.dirInfo]+0
	rel 64+8 t=R_ADDR type:*os.dirInfo+0
	rel 72+8 t=R_ADDR type:*os.dirInfo+0
type:.namedata.CompareAndSwap. SRODATA dupok size=16
	0x0000 01 0e 43 6f 6d 70 61 72 65 41 6e 64 53 77 61 70  ..CompareAndSwap
type:.namedata.*func(*os.dirInfo, *os.dirInfo) bool- SRODATA dupok size=38
	0x0000 00 24 2a 66 75 6e 63 28 2a 6f 73 2e 64 69 72 49  .$*func(*os.dirI
	0x0010 6e 66 6f 2c 20 2a 6f 73 2e 64 69 72 49 6e 66 6f  nfo, *os.dirInfo
	0x0020 29 20 62 6f 6f 6c                                ) bool
type:*func(*os.dirInfo, *os.dirInfo) bool SRODATA dupok size=56
	0x0000 08 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00  ................
	0x0010 5e 6b 53 61 08 08 08 36 00 00 00 00 00 00 00 00  ^kSa...6........
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 00 00 00 00 00 00 00 00                          ........
	rel 24+8 t=R_ADDR runtime.memequal64·f+0
	rel 32+8 t=R_ADDR runtime.gcbits.0100000000000000+0
	rel 40+4 t=R_ADDROFF type:.namedata.*func(*os.dirInfo, *os.dirInfo) bool-+0
	rel 48+8 t=R_ADDR type:func(*os.dirInfo, *os.dirInfo) bool+0
type:func(*os.dirInfo, *os.dirInfo) bool SRODATA dupok size=80
	0x0000 08 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00  ................
	0x0010 48 9c 04 10 02 08 08 33 00 00 00 00 00 00 00 00  H......3........
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 02 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0040 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	rel 32+8 t=R_ADDR runtime.gcbits.0100000000000000+0
	rel 40+4 t=R_ADDROFF type:.namedata.*func(*os.dirInfo, *os.dirInfo) bool-+0
	rel 44+4 t=RelocType(-32763) type:*func(*os.dirInfo, *os.dirInfo) bool+0
	rel 56+8 t=R_ADDR type:*os.dirInfo+0
	rel 64+8 t=R_ADDR type:*os.dirInfo+0
	rel 72+8 t=R_ADDR type:bool+0
type:.namedata.Load. SRODATA dupok size=6
	0x0000 01 04 4c 6f 61 64                                ..Load
type:.namedata.*func() *os.dirInfo- SRODATA dupok size=21
	0x0000 00 13 2a 66 75 6e 63 28 29 20 2a 6f 73 2e 64 69  ..*func() *os.di
	0x0010 72 49 6e 66 6f                                   rInfo
type:*func() *os.dirInfo SRODATA dupok size=56
	0x0000 08 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00  ................
	0x0010 9f 33 b3 3d 08 08 08 36 00 00 00 00 00 00 00 00  .3.=...6........
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 00 00 00 00 00 00 00 00                          ........
	rel 24+8 t=R_ADDR runtime.memequal64·f+0
	rel 32+8 t=R_ADDR runtime.gcbits.0100000000000000+0
	rel 40+4 t=R_ADDROFF type:.namedata.*func() *os.dirInfo-+0
	rel 48+8 t=R_ADDR type:func() *os.dirInfo+0
type:func() *os.dirInfo SRODATA dupok size=64
	0x0000 08 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00  ................
	0x0010 e2 f6 62 43 02 08 08 33 00 00 00 00 00 00 00 00  ..bC...3........
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	rel 32+8 t=R_ADDR runtime.gcbits.0100000000000000+0
	rel 40+4 t=R_ADDROFF type:.namedata.*func() *os.dirInfo-+0
	rel 44+4 t=RelocType(-32763) type:*func() *os.dirInfo+0
	rel 56+8 t=R_ADDR type:*os.dirInfo+0
type:.namedata.Store. SRODATA dupok size=7
	0x0000 01 05 53 74 6f 72 65                             ..Store
type:.namedata.*func(*os.dirInfo)- SRODATA dupok size=20
	0x0000 00 12 2a 66 75 6e 63 28 2a 6f 73 2e 64 69 72 49  ..*func(*os.dirI
	0x0010 6e 66 6f 29                                      nfo)
type:*func(*os.dirInfo) SRODATA dupok size=56
	0x0000 08 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00  ................
	0x0010 bc 37 80 49 08 08 08 36 00 00 00 00 00 00 00 00  .7.I...6........
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 00 00 00 00 00 00 00 00                          ........
	rel 24+8 t=R_ADDR runtime.memequal64·f+0
	rel 32+8 t=R_ADDR runtime.gcbits.0100000000000000+0
	rel 40+4 t=R_ADDROFF type:.namedata.*func(*os.dirInfo)-+0
	rel 48+8 t=R_ADDR type:func(*os.dirInfo)+0
type:func(*os.dirInfo) SRODATA dupok size=64
	0x0000 08 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00  ................
	0x0010 0f ea 90 93 02 08 08 33 00 00 00 00 00 00 00 00  .......3........
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	rel 32+8 t=R_ADDR runtime.gcbits.0100000000000000+0
	rel 40+4 t=R_ADDROFF type:.namedata.*func(*os.dirInfo)-+0
	rel 44+4 t=RelocType(-32763) type:*func(*os.dirInfo)+0
	rel 56+8 t=R_ADDR type:*os.dirInfo+0
type:.namedata.Swap. SRODATA dupok size=6
	0x0000 01 04 53 77 61 70                                ..Swap
type:.namedata.*func(*os.dirInfo) *os.dirInfo- SRODATA dupok size=32
	0x0000 00 1e 2a 66 75 6e 63 28 2a 6f 73 2e 64 69 72 49  ..*func(*os.dirI
	0x0010 6e 66 6f 29 20 2a 6f 73 2e 64 69 72 49 6e 66 6f  nfo) *os.dirInfo
type:*func(*os.dirInfo) *os.dirInfo SRODATA dupok size=56
	0x0000 08 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00  ................
	0x0010 ab 76 75 e5 08 08 08 36 00 00 00 00 00 00 00 00  .vu....6........
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 00 00 00 00 00 00 00 00                          ........
	rel 24+8 t=R_ADDR runtime.memequal64·f+0
	rel 32+8 t=R_ADDR runtime.gcbits.0100000000000000+0
	rel 40+4 t=R_ADDROFF type:.namedata.*func(*os.dirInfo) *os.dirInfo-+0
	rel 48+8 t=R_ADDR type:func(*os.dirInfo) *os.dirInfo+0
type:func(*os.dirInfo) *os.dirInfo SRODATA dupok size=72
	0x0000 08 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00  ................
	0x0010 63 31 bc d9 02 08 08 33 00 00 00 00 00 00 00 00  c1.....3........
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 01 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0040 00 00 00 00 00 00 00 00                          ........
	rel 32+8 t=R_ADDR runtime.gcbits.0100000000000000+0
	rel 40+4 t=R_ADDROFF type:.namedata.*func(*os.dirInfo) *os.dirInfo-+0
	rel 44+4 t=RelocType(-32763) type:*func(*os.dirInfo) *os.dirInfo+0
	rel 56+8 t=R_ADDR type:*os.dirInfo+0
	rel 64+8 t=R_ADDR type:*os.dirInfo+0
type:*sync/atomic.Pointer[os.dirInfo] SRODATA dupok size=136
	0x0000 08 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00  ................
	0x0010 53 db c0 f4 09 08 08 36 00 00 00 00 00 00 00 00  S......6........
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 00 00 00 00 00 00 00 00 00 00 00 00 04 00 04 00  ................
	0x0040 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0050 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0060 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0070 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0080 00 00 00 00 00 00 00 00                          ........
	rel 24+8 t=R_ADDR runtime.memequal64·f+0
	rel 32+8 t=R_ADDR runtime.gcbits.0100000000000000+0
	rel 40+4 t=R_ADDROFF type:.namedata.*atomic.Pointer[os.dirInfo].+0
	rel 48+8 t=R_ADDR type:sync/atomic.Pointer[os.dirInfo]+0
	rel 56+4 t=R_ADDROFF type:.importpath.sync/atomic.+0
	rel 72+4 t=R_ADDROFF type:.namedata.CompareAndSwap.+0
	rel 76+4 t=R_METHODOFF type:func(*os.dirInfo, *os.dirInfo) bool+0
	rel 80+4 t=R_METHODOFF sync/atomic.(*Pointer[os.dirInfo]).CompareAndSwap+0
	rel 84+4 t=R_METHODOFF sync/atomic.(*Pointer[os.dirInfo]).CompareAndSwap+0
	rel 88+4 t=R_ADDROFF type:.namedata.Load.+0
	rel 92+4 t=R_METHODOFF type:func() *os.dirInfo+0
	rel 96+4 t=R_METHODOFF sync/atomic.(*Pointer[os.dirInfo]).Load+0
	rel 100+4 t=R_METHODOFF sync/atomic.(*Pointer[os.dirInfo]).Load+0
	rel 104+4 t=R_ADDROFF type:.namedata.Store.+0
	rel 108+4 t=R_METHODOFF type:func(*os.dirInfo)+0
	rel 112+4 t=R_METHODOFF sync/atomic.(*Pointer[os.dirInfo]).Store+0
	rel 116+4 t=R_METHODOFF sync/atomic.(*Pointer[os.dirInfo]).Store+0
	rel 120+4 t=R_ADDROFF type:.namedata.Swap.+0
	rel 124+4 t=R_METHODOFF type:func(*os.dirInfo) *os.dirInfo+0
	rel 128+4 t=R_METHODOFF sync/atomic.(*Pointer[os.dirInfo]).Swap+0
	rel 132+4 t=R_METHODOFF sync/atomic.(*Pointer[os.dirInfo]).Swap+0
type:.namedata.*[]big.Word- SRODATA dupok size=13
	0x0000 00 0b 2a 5b 5d 62 69 67 2e 57 6f 72 64           ..*[]big.Word
type:*[]math/big.Word SRODATA dupok size=56
	0x0000 08 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00  ................
	0x0010 fe 42 4a 2a 08 08 08 36 00 00 00 00 00 00 00 00  .BJ*...6........
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 00 00 00 00 00 00 00 00                          ........
	rel 24+8 t=R_ADDR runtime.memequal64·f+0
	rel 32+8 t=R_ADDR runtime.gcbits.0100000000000000+0
	rel 40+4 t=R_ADDROFF type:.namedata.*[]big.Word-+0
	rel 48+8 t=R_ADDR type:[]math/big.Word+0
type:[]math/big.Word SRODATA dupok size=56
	0x0000 18 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00  ................
	0x0010 6b 4f c8 59 02 08 08 17 00 00 00 00 00 00 00 00  kO.Y............
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 00 00 00 00 00 00 00 00                          ........
	rel 32+8 t=R_ADDR runtime.gcbits.0100000000000000+0
	rel 40+4 t=R_ADDROFF type:.namedata.*[]big.Word-+0
	rel 44+4 t=RelocType(-32763) type:*[]math/big.Word+0
	rel 48+8 t=R_ADDR type:math/big.Word+0
main.s SBSS size=24
 SDWARFVAR size=23
	0x0000 0a 6d 61 69 6e 2e 73 00 09 03 00 00 00 00 00 00  .main.s.........
	0x0010 00 00 00 00 00 00 01                             .......
	rel 10+8 t=R_ADDR main.s+0
	rel 18+4 t=R_DWARFSECREF go:info.[]int+0
runtime.nilinterequal·f SRODATA dupok size=8
	0x0000 00 00 00 00 00 00 00 00                          ........
	rel 0+8 t=R_ADDR runtime.nilinterequal+0
type:.namedata.*[1]interface {}- SRODATA dupok size=18
	0x0000 00 10 2a 5b 31 5d 69 6e 74 65 72 66 61 63 65 20  ..*[1]interface 
	0x0010 7b 7d                                            {}
type:*[1]interface {} SRODATA dupok size=56
	0x0000 08 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00  ................
	0x0010 73 3b a6 1c 08 08 08 36 00 00 00 00 00 00 00 00  s;.....6........
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 00 00 00 00 00 00 00 00                          ........
	rel 24+8 t=R_ADDR runtime.memequal64·f+0
	rel 32+8 t=R_ADDR runtime.gcbits.0100000000000000+0
	rel 40+4 t=R_ADDROFF type:.namedata.*[1]interface {}-+0
	rel 48+8 t=R_ADDR type:[1]interface {}+0
runtime.gcbits.0200000000000000 SRODATA dupok size=8
	0x0000 02 00 00 00 00 00 00 00                          ........
type:[1]interface {} SRODATA dupok size=72
	0x0000 10 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00  ................
	0x0010 ea 37 5e 5e 02 08 08 11 00 00 00 00 00 00 00 00  .7^^............
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0040 01 00 00 00 00 00 00 00                          ........
	rel 24+8 t=R_ADDR runtime.nilinterequal·f+0
	rel 32+8 t=R_ADDR runtime.gcbits.0200000000000000+0
	rel 40+4 t=R_ADDROFF type:.namedata.*[1]interface {}-+0
	rel 44+4 t=RelocType(-32763) type:*[1]interface {}+0
	rel 48+8 t=R_ADDR type:interface {}+0
	rel 56+8 t=R_ADDR type:[]interface {}+0
type:.namedata.*[1]big.Word- SRODATA dupok size=14
	0x0000 00 0c 2a 5b 31 5d 62 69 67 2e 57 6f 72 64        ..*[1]big.Word
type:*[1]math/big.Word SRODATA dupok size=56
	0x0000 08 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00  ................
	0x0010 ad 4d 65 55 08 08 08 36 00 00 00 00 00 00 00 00  .MeU...6........
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 00 00 00 00 00 00 00 00                          ........
	rel 24+8 t=R_ADDR runtime.memequal64·f+0
	rel 32+8 t=R_ADDR runtime.gcbits.0100000000000000+0
	rel 40+4 t=R_ADDROFF type:.namedata.*[1]big.Word-+0
	rel 48+8 t=R_ADDR type:[1]math/big.Word+0
type:[1]math/big.Word SRODATA dupok size=72
	0x0000 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0010 fa 0d b7 7e 0a 08 08 11 00 00 00 00 00 00 00 00  ...~............
	0x0020 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0030 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................
	0x0040 01 00 00 00 00 00 00 00                          ........
	rel 24+8 t=R_ADDR runtime.memequal64·f+0
	rel 32+8 t=R_ADDR runtime.gcbits.+0
	rel 40+4 t=R_ADDROFF type:.namedata.*[1]big.Word-+0
	rel 44+4 t=RelocType(-32763) type:*[1]math/big.Word+0
	rel 48+8 t=R_ADDR type:math/big.Word+0
	rel 56+8 t=R_ADDR type:[]math/big.Word+0
gclocals·FzY36IO2mY0y4dZ1+Izd/w== SRODATA dupok size=8
	0x0000 01 00 00 00 00 00 00 00                          ........
main.fibonacci.arginfo1 SRODATA static dupok size=3
	0x0000 00 08 ff                                         ...
main.fibonacci.argliveinfo SRODATA static dupok size=2
	0x0000 00 00                                            ..
main.square.arginfo1 SRODATA static dupok size=3
	0x0000 00 08 ff                                         ...
main.square.argliveinfo SRODATA static dupok size=2
	0x0000 00 00                                            ..
main.sqrt.arginfo1 SRODATA static dupok size=3
	0x0000 00 04 ff                                         ...
main.sqrt.argliveinfo SRODATA static dupok size=2
	0x0000 00 00                                            ..
gclocals·n8San6612m6N3vDhLtXTDQ== SRODATA dupok size=8
	0x0000 05 00 00 00 00 00 00 00                          ........
gclocals·SMHAWLu0hMOKn/8czxfmcQ== SRODATA dupok size=18
	0x0000 05 00 00 00 0c 00 00 00 00 00 80 00 20 00 08 00  ............ ...
	0x0010 02 00                                            ..
main.main.stkobj SRODATA static size=88
	0x0000 05 00 00 00 00 00 00 00 a0 ff ff ff 10 00 00 00  ................
	0x0010 10 00 00 00 00 00 00 00 b0 ff ff ff 10 00 00 00  ................
	0x0020 10 00 00 00 00 00 00 00 c0 ff ff ff 10 00 00 00  ................
	0x0030 10 00 00 00 00 00 00 00 d0 ff ff ff 10 00 00 00  ................
	0x0040 10 00 00 00 00 00 00 00 e0 ff ff ff 20 00 00 00  ............ ...
	0x0050 10 00 00 00 00 00 00 00                          ........
	rel 20+4 t=R_ADDROFF runtime.gcbits.0200000000000000+0
	rel 36+4 t=R_ADDROFF runtime.gcbits.0200000000000000+0
	rel 52+4 t=R_ADDROFF runtime.gcbits.0200000000000000+0
	rel 68+4 t=R_ADDROFF runtime.gcbits.0200000000000000+0
	rel 84+4 t=R_ADDROFF runtime.gcbits.0200000000000000+0
gclocals·rJbr+btbFJy3NLIRCgNSZQ== SRODATA dupok size=10
	0x0000 02 00 00 00 02 00 00 00 03 00                    ..........
gclocals·ISb46fRPFoZ9pIfykFK/kQ== SRODATA dupok size=8
	0x0000 02 00 00 00 00 00 00 00                          ........
type:.eq.sync/atomic.Pointer[os.dirInfo].arginfo1 SRODATA static dupok size=3
	0x0000 08 08 ff                                         ...
type:.eq.sync/atomic.Pointer[os.dirInfo].argliveinfo SRODATA static dupok size=2
	0x0000 00 00                                            ..
