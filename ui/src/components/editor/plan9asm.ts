import * as monaco from 'monaco-editor/esm/vs/editor/editor.api'

const languageId = 'plan9asm'

const language: monaco.languages.IMonarchLanguage = {
  defaultToken: '',
  registers: [
    'SB',
    'AL',
    'CL',
    'DL',
    'BL',
    'SPB',
    'BPB',
    'SIB',
    'DIB',
    'R8B',
    'R9B',
    'R10B',
    'R11B',
    'R12B',
    'R13B',
    'R14B',
    'R15B',
    'AX',
    'CX',
    'DX',
    'BX',
    'SP',
    'BP',
    'SI',
    'DI',
    'R8',
    'R9',
    'R10',
    'R11',
    'R12',
    'R13',
    'R14',
    'R15',
    'AH',
    'CH',
    'DH',
    'BH',
    'F0',
    'F1',
    'F2',
    'F3',
    'F4',
    'F5',
    'F6',
    'F7',
    'M0',
    'M1',
    'M2',
    'M3',
    'M4',
    'M5',
    'M6',
    'M7',
    'K0',
    'K1',
    'K2',
    'K3',
    'K4',
    'K5',
    'K6',
    'K7',
    'X0',
    'X1',
    'X2',
    'X3',
    'X4',
    'X5',
    'X6',
    'X7',
    'X8',
    'X9',
    'X10',
    'X11',
    'X12',
    'X13',
    'X14',
    'X15',
    'X16',
    'X17',
    'X18',
    'X19',
    'X20',
    'X21',
    'X22',
    'X23',
    'X24',
    'X25',
    'X26',
    'X27',
    'X28',
    'X29',
    'X30',
    'X31',
    'Y0',
    'Y1',
    'Y2',
    'Y3',
    'Y4',
    'Y5',
    'Y6',
    'Y7',
    'Y8',
    'Y9',
    'Y10',
    'Y11',
    'Y12',
    'Y13',
    'Y14',
    'Y15',
    'Y16',
    'Y17',
    'Y18',
    'Y19',
    'Y20',
    'Y21',
    'Y22',
    'Y23',
    'Y24',
    'Y25',
    'Y26',
    'Y27',
    'Y28',
    'Y29',
    'Y30',
    'Y31',
    'Z0',
    'Z1',
    'Z2',
    'Z3',
    'Z4',
    'Z5',
    'Z6',
    'Z7',
    'Z8',
    'Z9',
    'Z10',
    'Z11',
    'Z12',
    'Z13',
    'Z14',
    'Z15',
    'Z16',
    'Z17',
    'Z18',
    'Z19',
    'Z20',
    'Z21',
    'Z22',
    'Z23',
    'Z24',
    'Z25',
    'Z26',
    'Z27',
    'Z28',
    'Z29',
    'Z30',
    'Z31',
    'CS',
    'SS',
    'DS',
    'ES',
    'FS',
    'GS',
    'GDTR',
    'IDTR',
    'LDTR',
    'MSW',
    'TASK',
    'CR0',
    'CR1',
    'CR2',
    'CR3',
    'CR4',
    'CR5',
    'CR6',
    'CR7',
    'CR8',
    'CR9',
    'CR10',
    'CR11',
    'CR12',
    'CR13',
    'CR14',
    'CR15',
    'DR0',
    'DR1',
    'DR2',
    'DR3',
    'DR4',
    'DR5',
    'DR6',
    'DR7',
    'TR0',
    'TR1',
    'TR2',
    'TR3',
    'TR4',
    'TR5',
    'TR6',
    'TR7',
    'TLS',
    'CR',
    'DR',
    'TR',
  ],
  tokenizer: {
    root: [
      [/^(0x\w+\t)([A-Z_.]+)/, ['annotation', 'keyword']],
      [/^([A-Z_.]+)\s+/, 'keyword'],
      [
        /[A-Za-z]+[\w_.Â·:*+=]+/,
        {
          cases: {
            '@registers': 'string',
            '@default': 'identifier',
          },
        },
      ],
      [/[ \t,()\r\n]+/, 'white'],
      [/[,()]/, ''],
      [/(\$?[-0-9xA-Fa-f]+)/, 'number'],
    ],
  },
}

monaco.languages.register({ id: languageId })

monaco.languages.setMonarchTokensProvider(languageId, language)

monaco.languages.registerFoldingRangeProvider(languageId, {
  provideFoldingRanges(model) {
    const regions = new Array<monaco.languages.FoldingRange>()
    let region: monaco.languages.FoldingRange | null = null
    for (let i = 0; i < model.getLineCount(); i++) {
      const line = model.getLineContent(i + 1)
      if (line.startsWith('TEXT')) {
        if (!region) {
          region = {
            start: i + 1,
            end: 0,
            kind: monaco.languages.FoldingRangeKind.Region,
          }
        } else {
          region.end = i
          regions.push(region)
          region = {
            start: i + 1,
            end: 0,
            kind: monaco.languages.FoldingRangeKind.Region,
          }
        }
      }
    }
    if (region) {
      region.end = model.getLineCount()
      regions.push(region)
    }
    return regions
  },
})
